package br.com.ecomerce.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import br.com.ecommerce.conexao.Conexao;
import br.com.ecommerce.modelo.Autor;
import br.com.ecommerce.modelo.Livro;
import br.com.ecommerce.util.JavaUtil;

public class LivroDAO {
	private Connection connection;
    private PreparedStatement p;
    private String sql;
    private ResultSet rs;
    
    public boolean cadastrarLivro(Livro livro){
    	boolean cadastrou = false;
    	sql = "INSERT INTO LIVRO VALUES ( NULL, ?, ?, ?, ?, ?, ?, ?, ?)";
    	connection = Conexao.getConnection();
        
        try {
			p = connection.prepareStatement(sql);
			p.setString(1, livro.getTitulo());
			p.setString(2, livro.getDescricao());
			p.setInt(3, livro.getEditora().getIdEditora());
			p.setInt(4, livro.getGenero().getGeneroId());
			p.setInt(5, livro.getAutor().getIdAutor());
			p.setBigDecimal(6, livro.getPreco());
			p.setBigDecimal(7, livro.getDesconto());
			p.setBigDecimal(8, livro.getPrecoAtual());
			p.execute();
			cadastrou = true;
        }catch (Exception e) {
			// TODO: handle exception
        	e.printStackTrace();
		}
    	return cadastrou;
    }

	public ArrayList<Livro> listarLivro() {
		ArrayList<Livro> lista = new ArrayList<Livro>();
		
		sql = "SELECT * FROM LIVRO";
    	connection = Conexao.getConnection();
    	
    	try {
			p = connection.prepareStatement(sql);
			rs = p.executeQuery();
			while(rs.next()){
				Livro livro = new Livro();
				livro.setIdLivro(rs.getInt("livro_id"));
				livro.setTitulo(rs.getString("titulo"));
				livro.setPreco(rs.getBigDecimal("preco"));
				livro.setDesconto(rs.getBigDecimal("desconto"));
				livro.setPrecoAtual(rs.getBigDecimal("precototal"));
				livro.setDescricao(rs.getString("descricao"));
				lista.add(livro);
			}
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	return lista;
	}

	public void excluir(Livro livro) {
		sql = "DELETE FROM LIVRO WHERE LIVRO_ID = ?";
		connection = Conexao.getConnection();
		try{
			p = connection.prepareStatement(sql);
			p.setInt(1, livro.getIdLivro());
			p.execute();
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public boolean editar(Livro livro) {
		boolean alterou = false;
		sql = "UPDATE LIVRO SET TITULO = ?, DESCRICAO = ?, EDITORA_ID_EDITORA = ?, GENERO_ID_GENERO = ?, AUTOR_ID_AUTOR = ? , DESCONTO = ?, PRECO = ?, PRECOTOTAL = ? WHERE LIVRO_ID = ? ";
		connection = Conexao.getConnection();
		try{
			p = connection.prepareStatement(sql);
			p.setString(1, livro.getTitulo());
			p.setString(2, livro.getDescricao());
			p.setInt(3, livro.getEditora().getIdEditora());
			p.setInt(4, livro.getGenero().getGeneroId());
			p.setInt(5, livro.getAutor().getIdAutor());
			p.setBigDecimal(6, livro.getDesconto());
			p.setBigDecimal(7, livro.getPreco());
			p.setBigDecimal(8, livro.getPrecoAtual());
			p.setInt(9, livro.getIdLivro());
			p.execute();
			alterou = true;
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			JavaUtil.adicionarMensagemSucesso("Erro ao registrar no banco");
		}
		return alterou;
	}
	
	
	
	public ArrayList<Livro> buscarPorLivro(String pesquisa, String combobox) {
		ArrayList<Livro> lista = new ArrayList<Livro>();
		
		connection = Conexao.getConnection();
		try {
		if(combobox.equalsIgnoreCase("Titulo")){
			sql = "SELECT * FROM LIVRO WHERE TITULO = ?";
			p = connection.prepareStatement(sql);
			p.setString(1, pesquisa);
		}
		else if(combobox.equalsIgnoreCase("Autor")){
			sql = "SELECT * FROM LIVRO WHERE AUTOR_ID_AUTOR = ?";
			p = connection.prepareStatement(sql);
		}
		else{
			sql = "SELECT * FROM LIVRO WHERE EDITORA_ID_EDITORA = ?";
			p = connection.prepareStatement(sql);
		}
			rs = p.executeQuery();
			while(rs.next()){
				Livro livro = new Livro();
				livro.setIdLivro(rs.getInt("livro_id"));
				livro.setTitulo(rs.getString("titulo"));
				livro.setPreco(rs.getBigDecimal("preco"));
				livro.setDesconto(rs.getBigDecimal("desconto"));
				livro.setPrecoAtual(rs.getBigDecimal("precototal"));
				livro.setDescricao(rs.getString("descricao"));
				lista.add(livro);
			}
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	return lista;
	}
	
	
	public ArrayList<Integer> buscarAutor(String pesquisa){
		ArrayList<Integer> lista = new ArrayList<Integer>();
		sql = "SELECT * FROM AUTOR WHERE NOME = ?";
		connection = Conexao.getConnection();
		try {
			p = connection.prepareStatement(sql);
			p.setString(1, pesquisa);
			rs = p.executeQuery();
			while(rs.next()){
				int idAutor = rs.getInt("id_autor");
				lista.add(idAutor);
			}
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	return lista;
		
	}
	
	
	public static void main(String[] args) {
		LivroDAO dao = new LivroDAO();
		ArrayList<Integer> lista = new ArrayList<>();
		lista = dao.buscarAutor("Stephe King");
		
		for (Integer livro : lista) {
			System.out.println(livro.intValue()+"\n");
		}
		
		/*
		lista = dao.buscarPorLivro("Titulo 1");
		
		for (Livro livro : lista) {
			System.out.println(livro.getTitulo()+"\n");
			System.out.println(livro.getPreco()+"\n");
		}
		*/
		
	}

	
}
